package br.com.rexpress.valuesObjects;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

/**
 * The persistent class for the merenda_mapa_hist database table.
 * 
 */
@Entity
@Table(name = "merenda_mapa_hist")
@NamedQueries({
		@NamedQuery(name = "MerendaMapaHist.findAll", query = "SELECT m FROM MerendaMapaHist m"),
		@NamedQuery(name = "MerendaMapaHist.seExiste", query = "SELECT m FROM MerendaMapaHist m WHERE m.descricaoMerenda = :descricao") })
public class MerendaMapaHist implements Serializable,
		br.com.rexpress.util.VOGenerico {
	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "id_merenda_hist", unique = true, nullable = false)
	private Integer id;

	@Column(name = "descricao_merenda", length = 2147483647)
	private String descricaoMerenda;

	@Column(name = "merenda_fria")
	private Boolean merendaFria;

	// bi-directional many-to-many association to Mapa
	@ManyToMany(mappedBy = "merendaMapaHists")
	private List<Mapa> mapas;

	// bi-directional many-to-many association to ItemMapaHist
	@ManyToMany(fetch = FetchType.EAGER)
	@JoinTable(name = "item_merenda_mapa", joinColumns = @JoinColumn(name = "id_merenda_hist", nullable = false), inverseJoinColumns = @JoinColumn(name = "id_item_mapa", nullable = false))
	private List<ItemMapaHist> itemMapaHists = new ArrayList<ItemMapaHist>();

	@ManyToMany(fetch = FetchType.EAGER, cascade=CascadeType.ALL)
	@JoinTable(name = "descartavel_merenda_mapa", joinColumns = @JoinColumn(name = "id_merenda", nullable = false), inverseJoinColumns = @JoinColumn(name = "id_descartavel", nullable = false))
	private List<Descartavel> descartavelsMapa = new ArrayList<Descartavel>();

	public MerendaMapaHist() {
	}

	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getDescricaoMerenda() {
		return this.descricaoMerenda;
	}

	public void setDescricaoMerenda(String descricaoMerenda) {
		this.descricaoMerenda = descricaoMerenda;
	}

	public Boolean getMerendaFria() {
		return this.merendaFria;
	}

	public void setMerendaFria(Boolean merendaFria) {
		this.merendaFria = merendaFria;
	}

	public List<Mapa> getMapas() {
		return this.mapas;
	}

	public void setMapas(List<Mapa> mapas) {
		this.mapas = mapas;
	}

	public List<ItemMapaHist> getItemMapaHists() {
		return this.itemMapaHists;
	}

	public void setItemMapaHists(List<ItemMapaHist> itemMapaHists) {
		this.itemMapaHists = itemMapaHists;
	}

	public List<Descartavel> getDescartavelsMapa() {
		return this.descartavelsMapa;
	}

	public void setDescartavelsMapa(List<Descartavel> descartavels) {
		this.descartavelsMapa = descartavels;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime
				* result
				+ ((descricaoMerenda == null) ? 0 : descricaoMerenda.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result
				+ ((merendaFria == null) ? 0 : merendaFria.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof MerendaMapaHist))
			return false;
		MerendaMapaHist other = (MerendaMapaHist) obj;
		if (descricaoMerenda == null) {
			if (other.descricaoMerenda != null)
				return false;
		} else if (!descricaoMerenda.equals(other.descricaoMerenda))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (merendaFria == null) {
			if (other.merendaFria != null)
				return false;
		} else if (!merendaFria.equals(other.merendaFria))
			return false;
		return true;
	}

	public MerendaMapaHist valueOf(Merenda pMerenda) {
		MerendaMapaHist merendaHist = new MerendaMapaHist();
		ItemMapaHist itemHist = new ItemMapaHist();
		merendaHist.setDescricaoMerenda(pMerenda.getDescricaoMerenda());
		merendaHist.setMerendaFria(pMerenda.getMerendaFria());
		merendaHist.setItemMapaHists(itemHist.valueOf(pMerenda.getItems()));
		merendaHist.setDescartavelsMapa(new ArrayList<Descartavel>(pMerenda.getDescartavels()));
		return merendaHist;
	}
}