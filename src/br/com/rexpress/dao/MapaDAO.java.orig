package br.com.rexpress.dao;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import br.com.rexpress.util.DAOGenerico;
import br.com.rexpress.util.EntityManagerUtil;
import br.com.rexpress.valuesObjects.Descartavel;
import br.com.rexpress.valuesObjects.Instituicao;
import br.com.rexpress.valuesObjects.ItemMapaHist;
import br.com.rexpress.valuesObjects.Mapa;
import br.com.rexpress.valuesObjects.MerendaMapaHist;
import br.com.rexpress.valuesObjects.Turno;
import br.com.rexpress.valuesObjects.TurnoMapa;

public class MapaDAO extends DAOGenerico<Mapa> {
	private EntityManager aEntityManager;

	public MapaDAO() {
	}

	@SuppressWarnings("unchecked")
	public List<Mapa> listarEscolasMapeadas() {
		aEntityManager = EntityManagerUtil.getEntityManager();
		Query q = aEntityManager.createNamedQuery("Mapa.escolaMapeada");
		List<Mapa> retornoConsulta = q.getResultList();
		return retornoConsulta;
	}
	

	@SuppressWarnings("unchecked")
	public List<Mapa> listarTudo() {
		aEntityManager = EntityManagerUtil.getEntityManager();
		Query q = aEntityManager.createNamedQuery("Mapa.findAll");
		List<Mapa> retornoConsulta = q.getResultList();
		return retornoConsulta;
	}
	
	@SuppressWarnings("unchecked")
	public List<Mapa> listarSeExisteInstituicaoPorData(Mapa pMapa) {
		aEntityManager = EntityManagerUtil.getEntityManager();
		Query q = aEntityManager.createNamedQuery("Mapa.seExisteInsituicaoPorData");
		q.setParameter("id", pMapa.getInstituicao().getId());
		q.setParameter("data", pMapa.getDataroteirizacao());
		List<Mapa> retornoConsulta = q.getResultList();
		return retornoConsulta;
	}

	@SuppressWarnings("unchecked")
	public List<Instituicao> escolasPendentesPorData(Date data) {
		aEntityManager = EntityManagerUtil.getEntityManager();
		List<Instituicao> instituicoesPendentes = new ArrayList<Instituicao>();
		Query q = aEntityManager
				.createNamedQuery("Instituicao.listarEscolasPendentesPorData");
		q.setParameter("data", data);
		instituicoesPendentes = q.getResultList();

		return instituicoesPendentes;
	}

	@SuppressWarnings("unchecked")
	public List<Instituicao> crechesPendentesPorData(Date data) {
		aEntityManager = EntityManagerUtil.getEntityManager();
		List<Instituicao> instituicoesPendentes = new ArrayList<Instituicao>();
		Query q = aEntityManager
				.createNamedQuery("Instituicao.listarCrechesPendentesPorData");
		q.setParameter("data", data);
		instituicoesPendentes = q.getResultList();

		return instituicoesPendentes;
	}

	public void inserirTurnos(Mapa pMapa) {
		TurnoMapaDAO dao = new TurnoMapaDAO();
		List<Mapa> mapa = new ArrayList<Mapa>();
		for (TurnoMapa turnos : pMapa.getTurnoMapas()) {
			if (turnos != null) {
				mapa = listarSeExisteInstituicaoPorData(pMapa);
				turnos.setMapa(mapa.get(0));
				dao.inserir(turnos);
			}
		}

	}

	public void inserirMerendas(Mapa pMapa) {
		ItemMapaHistDAO daoItem = new ItemMapaHistDAO();
		MerendaMapaHistDAO daoMerenda = new MerendaMapaHistDAO();
		List<ItemMapaHist> itens = new ArrayList<ItemMapaHist>();
		List<ItemMapaHist> consultaItem = new ArrayList<ItemMapaHist>();
		List<MerendaMapaHist> consultaMerenda= new ArrayList<MerendaMapaHist>();
		List<Descartavel> descartavel = new ArrayList<Descartavel>();

		for (MerendaMapaHist merenda : pMapa.getMerendaMapaHists()) {
			for (ItemMapaHist item : merenda.getItemMapaHists()) {
				itens = new ArrayList<ItemMapaHist>();
				if (item != null) {
					consultaItem = daoItem.listarSeExiste(item);
					if (consultaItem.isEmpty()) {
						daoItem.inserir(item);
					} else if (!consultaItem.isEmpty()) {
						if(!itens.containsAll(consultaItem))
						itens.addAll(consultaItem);
					}
					if (consultaItem.isEmpty()) {
						itens.addAll(daoItem.listarSeExiste(item));
					}
				}
				consultaItem = new ArrayList<ItemMapaHist>();
			}
			descartavel = merenda.getDescartavelsMapa();
			merenda.setItemMapaHists(itens);
			consultaMerenda = daoMerenda.listarSeExiste(merenda);
			if(consultaMerenda.isEmpty()){
				daoMerenda.inserir(merenda);	
			}
			
		}
	}
}